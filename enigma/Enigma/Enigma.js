Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var t=s(require("../Component/PlugBoard/PlugBoard")),e=require("../lib/utils"),o=s(require("../Component/WiredWheel/EntryWheel")),r=s(require("../Component/WiredWheel/Rotor/Rotor")),i=s(require("../Component/WiredWheel/Reflector/Reflector"));function s(t){return t&&t.__esModule?t:{default:t}}const n="L",h="C",a="R";exports.default=class{#t;plugBoard=new t.default;entryWheel=new o.default;rotors={};rotorsWindowLetter={};constructor(t){this.#t=t,this.plugBoard.setEventEmitter(this.#t),this.setRotor(null,n),this.setRotor(null,h),this.setRotor(null,a)}getPlugBoard(){return this.plugBoard}setRotor(t,e){return t.setEventEmitter(this.#t),this.rotors[e]=t,this.#t.emit("change.rotorSet",t,e),this.setRotorWindowLetter("A",e),this}getRotor(t){return this.rotors[t]}setReflector(t){return t.setEventEmitter(this.#t),this.reflector=t,this.#t.emit("change.reflectorSet",t),this}setRotorWindowLetter(t,e){return this.rotorsWindowLetter[e]=t,this.#t.emit("change.rotorWindowLetterSet",t,e,this.getRotor(e)),this}getRotorWindowLetter(t){return this.rotorsWindowLetter[t]}isRotorInNotchPosition(t){const o=(0,e.getNotchLetter)(this.getRotorWindowLetter(t));return this.getRotor(t).notchPosition.indexOf(o)>-1}advanceRotor(t){return this.setRotorWindowLetter((0,e.getNextLetter)(this.getRotorWindowLetter(t)),t),this.#t.emit("change.rotorAdvanced",t,this.getRotor(t),this.getRotorWindowLetter(t)),this}advanceRotors(){const t=this.isRotorInNotchPosition(h),e=this.isRotorInNotchPosition(a);return t&&this.advanceRotor(n),(t||e)&&this.advanceRotor(h),this.advanceRotor(a),this.#t.emit("change.rotorsAdvanced"),this}encodeForward(e){const o=e.toUpperCase(),r=this.plugBoard.getSwappedLetter(o,t.default.DIRECTION_FORWARD),i=this.entryWheel.getPlateFromLetter(r),s=this.getRotorInputPosition(i,a),u=this.getRotor(a).pinToPlate(s),d=this.getRotorOutputPosition(u,a),R=this.getRotorInputPosition(d,h),g=this.getRotor(h).pinToPlate(R),l=this.getRotorOutputPosition(g,h),c=this.getRotorInputPosition(l,n),p=this.getRotor(n).pinToPlate(c);return this.getRotorOutputPosition(p,n)}encodeReflect(t){return this.reflector.pinToPin(t)}encodeBackwards(e){const o=this.getRotorInputPosition(e,n),r=this.getRotor(n).plateToPin(o),i=this.getRotorOutputPosition(r,n),s=this.getRotorInputPosition(i,h),u=this.getRotor(h).plateToPin(s),d=this.getRotorOutputPosition(u,h),R=this.getRotorInputPosition(d,a),g=this.getRotor(a).plateToPin(R),l=this.getRotorOutputPosition(g,a),c=this.entryWheel.getLetterFromPlate(l);return this.plugBoard.getSwappedLetter(c,t.default.DIRECTION_BACKWARDS)}getEncodedLetter(t){if(!this.isMachineValidState())throw"Machine is not in valid state";this.advanceRotors();const e=this.encodeForward(t),o=this.encodeReflect(e);return this.encodeBackwards(o)}getRotorInputPosition(t,o){return(0,e.getModularNumber)(t+(0,e.getIndex)(this.getRotorWindowLetter(o))-this.getRotor(o).ringPosition)}getRotorOutputPosition(t,o){return(0,e.getModularNumber)(t-(0,e.getIndex)(this.getRotorWindowLetter(o))+this.getRotor(o).ringPosition)}encode(t){let e="";for(let o=0;o<t.length;o+=1)e+=this.getEncodedLetter(t.charAt(o));return e}isMachineValidState(){return this.getRotor(n)instanceof r.default&&this.getRotor(h)instanceof r.default&&this.getRotor(a)instanceof r.default&&this.reflector instanceof i.default}static LEFT_ROTOR=n;static CENTER_ROTOR=h;static RIGHT_ROTOR=a};
