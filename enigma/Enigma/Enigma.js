Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var t=n(require("../Component/PlugBoard/PlugBoard")),e=require("../lib/utils"),o=n(require("../Component/WiredWheel/EntryWheel")),r=n(require("../Component/WiredWheel/Rotor/Rotor")),i=n(require("../Component/WiredWheel/Reflector/Reflector"));function n(t){return t&&t.__esModule?t:{default:t}}const s="L",h="C",u="R";exports.default=class{plugBoard=new t.default;entryWheel=new o.default;rotors={};rotorsWindowLetter={};constructor(){this.setRotor(null,s),this.setRotor(null,h),this.setRotor(null,u)}getPlugBoard(){return this.plugBoard}setRotor(t,e){return this.rotors[e]=t,this.setRotorWindowLetter("A",e),this}getRotor(t){return this.rotors[t]}setReflector(t){return this.reflector=t,this}setRotorWindowLetter(t,e){return this.rotorsWindowLetter[e]=t,this}getRotorWindowLetter(t){return this.rotorsWindowLetter[t]}isRotorInNotchPosition(t){const o=(0,e.getNotchLetter)(this.getRotorWindowLetter(t));return this.getRotor(t).notchPosition.indexOf(o)>-1}advanceRotor(t){return this.setRotorWindowLetter((0,e.getNextLetter)(this.getRotorWindowLetter(t)),t),this}advanceRotors(){const t=this.isRotorInNotchPosition(h),e=this.isRotorInNotchPosition(u);return t&&this.advanceRotor(s),(t||e)&&this.advanceRotor(h),this.advanceRotor(u),this}encodeForward(e){const o=e.toUpperCase(),r=this.plugBoard.getSwappedLetter(o,t.default.DIRECTION_FORWARD),i=this.entryWheel.getPlateFromLetter(r),n=this.getRotorInputPosition(i,u),a=this.getRotor(u).pinToPlate(n),R=this.getRotorOutputPosition(a,u),d=this.getRotorInputPosition(R,h),l=this.getRotor(h).pinToPlate(d),g=this.getRotorOutputPosition(l,h),c=this.getRotorInputPosition(g,s),p=this.getRotor(s).pinToPlate(c);return this.getRotorOutputPosition(p,s)}encodeReflect(t){return this.reflector.pinToPin(t)}encodeBackwards(e){const o=this.getRotorInputPosition(e,s),r=this.getRotor(s).plateToPin(o),i=this.getRotorOutputPosition(r,s),n=this.getRotorInputPosition(i,h),a=this.getRotor(h).plateToPin(n),R=this.getRotorOutputPosition(a,h),d=this.getRotorInputPosition(R,u),l=this.getRotor(u).plateToPin(d),g=this.getRotorOutputPosition(l,u),c=this.entryWheel.getLetterFromPlate(g);return this.plugBoard.getSwappedLetter(c,t.default.DIRECTION_BACKWARDS)}getEncodedLetter(t){if(!this.isMachineValidState())throw"Machine is not in valid state";this.advanceRotors();const e=this.encodeForward(t),o=this.encodeReflect(e);return this.encodeBackwards(o)}getRotorInputPosition(t,o){return(0,e.getModularNumber)(t+(0,e.getIndex)(this.getRotorWindowLetter(o))-this.getRotor(o).ringPosition)}getRotorOutputPosition(t,o){return(0,e.getModularNumber)(t-(0,e.getIndex)(this.getRotorWindowLetter(o))+this.getRotor(o).ringPosition)}encode(t){let e="";for(let o=0;o<t.length;o+=1)e+=this.getEncodedLetter(t.charAt(o));return e}isMachineValidState(){return this.getRotor(s)instanceof r.default&&this.getRotor(h)instanceof r.default&&this.getRotor(u)instanceof r.default&&this.reflector instanceof i.default}static LEFT_ROTOR=s;static CENTER_ROTOR=h;static RIGHT_ROTOR=u};
