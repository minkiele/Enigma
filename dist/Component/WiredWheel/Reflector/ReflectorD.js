"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const Reflector_1=__importDefault(require("./Reflector")),utils_1=require("../../../lib/utils"),COUPLES=13,LOWER_LIMIT=0,UPPER_LIMIT=26,PERMANENTLY_WIRED_0=0,PERMANENTLY_WIRED_1=13;class ReflectorD extends Reflector_1.default{constructor(){super(...arguments),this.#e=[[0,13]]}#e;plugWire(e,t){if(this.#e.length>=13)throw"All plugs have been wired";if(!this.arePlugsWireable(e,t))throw"This couple is permanently wired and therefore cannot be plugged";if(e===t)throw"Cannot wire the same letter";if(!(e>=0&&e<26&&t>=0&&t<26))throw"Wiring indexes out of bounds";for(let r=0;r<this.#e.length;r+=1){const[i,n]=this.#e[r];if(i===e||n===e||i===t||n===t)throw"At least one of the plugs is already wired"}this.#e.push([e,t]),this.emit("change.wirePlugged",e,t)}arePlugsWireable(e,t){return!(0===e&&13===t||13===e&&0===t)}unplugWire(e,t){if(!this.arePlugsWireable(e,t))throw"This couple is permanently wired and therefore cannot be unplugged";for(let r=0;r<this.#e.length;r+=1){const[i,n]=this.#e[r];(i===e&&n===t||i===t&&n===e)&&(this.#e.splice(r,1),this.emit("change.wireUnplugged",e,t))}}pinToPin(e){for(let t=0;t<this.#e.length;t+=1){const[r,i]=this.#e[t];if(r===e)return i;if(i===e)return r}throw"This pin is not wired"}getReflectedLetter(){throw"This method has various interpretations on this reflector"}getIndexFromGermanNotation(e){let t=utils_1.getIndex(e);if(9===t||24===t)throw"J and Y letters do not appear in German notation";return(t>8&&t<13||25===t)&&(t-=1),25-t}getIndexFromAlliedNotation(e){const t=utils_1.getIndex(e);return utils_1.getModularNumber(t+25)}plugWireInGermanNotation(e,t){this.plugWire(this.getIndexFromGermanNotation(e),this.getIndexFromGermanNotation(t))}unplugWireInGermanNotation(e,t){this.unplugWire(this.getIndexFromGermanNotation(e),this.getIndexFromGermanNotation(t))}plugWireInAlliedNotation(e,t){this.plugWire(this.getIndexFromAlliedNotation(e),this.getIndexFromAlliedNotation(t))}unplugWireInAlliedNotation(e,t){this.unplugWire(this.getIndexFromAlliedNotation(e),this.getIndexFromAlliedNotation(t))}}exports.default=ReflectorD;
