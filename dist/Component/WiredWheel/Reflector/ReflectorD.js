var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[i]}})}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&__createBinding(t,e,i);return __setModuleDefault(t,e),t},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};!function(e){if("object"==typeof module&&"object"==typeof module.exports){var t=e(require,exports);void 0!==t&&(module.exports=t)}else"function"==typeof define&&define.amd&&define(["require","exports","../Reflector","../../../Utils"],e)}((function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=__importDefault(e("../Reflector")),r=__importStar(e("../../../Utils"));class n extends i.default{constructor(){super(...arguments),this.reflectorDWirings=[[0,13]]}plugWire(e,t){if(this.reflectorDWirings.length>=13)throw"All plugs have been wired";if(!this.arePlugsWireable(e,t))throw"This couple is permanently wired and therefore cannot be plugged";if(e===t)throw"Cannot wire the same letter";if(!(e>=0&&e<26&&t>=0&&t<26))throw"Wiring indexes out of bounds";for(let i=0;i<this.reflectorDWirings.length;i+=1){const[r,n]=this.reflectorDWirings[i];if(r===e||n===e||r===t||n===t)throw"At least one of the plugs is already wired"}this.reflectorDWirings.push([e,t]),this.emit("change.wirePlugged",e,t)}arePlugsWireable(e,t){return!(0===e&&13===t||13===e&&0===t)}unplugWire(e,t){if(!this.arePlugsWireable(e,t))throw"This couple is permanently wired and therefore cannot be unplugged";for(let i=0;i<this.reflectorDWirings.length;i+=1){const[r,n]=this.reflectorDWirings[i];(r===e&&n===t||r===t&&n===e)&&(this.reflectorDWirings.splice(i,1),this.emit("change.wireUnplugged",e,t))}}pinToPin(e){for(let t=0;t<this.reflectorDWirings.length;t+=1){const[i,r]=this.reflectorDWirings[t];if(i===e)return r;if(r===e)return i}throw"This pin is not wired"}getReflectedLetter(){throw"This method has various interpretations on this reflector"}getIndexFromGermanNotation(e){let t=r.getIndex(e);if(9===t||24===t)throw"J and Y letters do not appear in German notation";return(t>8&&t<13||25===t)&&(t-=1),25-t}getIndexFromAlliedNotation(e){const t=r.getIndex(e);return r.getModularNumber(t+25)}plugWireInGermanNotation(e,t){this.plugWire(this.getIndexFromGermanNotation(e),this.getIndexFromGermanNotation(t))}unplugWireInGermanNotation(e,t){this.unplugWire(this.getIndexFromGermanNotation(e),this.getIndexFromGermanNotation(t))}plugWireInAlliedNotation(e,t){this.plugWire(this.getIndexFromAlliedNotation(e),this.getIndexFromAlliedNotation(t))}unplugWireInAlliedNotation(e,t){this.unplugWire(this.getIndexFromAlliedNotation(e),this.getIndexFromAlliedNotation(t))}}t.default=n}));
