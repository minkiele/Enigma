"use strict";var __importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0});const PlugBoard_1=__importDefault(require("../Component/PlugBoard/PlugBoard")),utils_1=require("../lib/utils"),EntryWheel_1=__importDefault(require("../Component/WiredWheel/EntryWheel")),Rotor_1=__importDefault(require("../Component/WiredWheel/Rotor/Rotor")),Reflector_1=__importDefault(require("../Component/WiredWheel/Reflector/Reflector")),EventEmitter_1=__importDefault(require("../lib/EventEmitter")),LEFT_ROTOR="L",CENTER_ROTOR="C",RIGHT_ROTOR="R";class Enigma extends EventEmitter_1.default{constructor(){super(),this.plugBoard=new PlugBoard_1.default,this.entryWheel=new EntryWheel_1.default,this.rotors={},this.rotorsWindowLetter={},this.setRotor(null,"L"),this.setRotor(null,"C"),this.setRotor(null,"R")}getPlugBoard(){return this.plugBoard}setRotor(t,e){return this.rotors[e]=t,this.emit("change.rotorSet",t,e),this.setRotorWindowLetter("A",e),this}getRotor(t){return this.rotors[t]}setReflector(t){return this.reflector=t,this.emit("change.reflectorSet",t),this}setRotorWindowLetter(t,e){return this.rotorsWindowLetter[e]=t,this.emit("change.rotorWindowLetterSet",t,e,this.getRotor(e)),this}getRotorWindowLetter(t){return this.rotorsWindowLetter[t]}isRotorInNotchPosition(t){const e=utils_1.getNotchLetter(this.getRotorWindowLetter(t));return this.getRotor(t).notchPosition.indexOf(e)>-1}advanceRotor(t){return this.setRotorWindowLetter(utils_1.getNextLetter(this.getRotorWindowLetter(t)),t),this.emit("change.rotorAdvanced",t,this.getRotor(t),this.getRotorWindowLetter(t)),this}advanceRotors(){const t=this.isRotorInNotchPosition("C"),e=this.isRotorInNotchPosition("R");return t&&this.advanceRotor("L"),(t||e)&&this.advanceRotor("C"),this.advanceRotor("R"),this.emit("change.rotorsAdvanced"),this}encodeForward(t){const e=t.toUpperCase(),o=this.plugBoard.getSwappedLetter(e),r=this.entryWheel.getPlateFromLetter(o),i=this.getRotorInputPosition(r,"R"),s=this.getRotor("R").pinToPlate(i),n=this.getRotorOutputPosition(s,"R"),h=this.getRotorInputPosition(n,"C"),u=this.getRotor("C").pinToPlate(h),R=this.getRotorOutputPosition(u,"C"),a=this.getRotorInputPosition(R,"L"),l=this.getRotor("L").pinToPlate(a);return this.getRotorOutputPosition(l,"L")}encodeReflect(t){return this.reflector.pinToPin(t)}encodeBackwards(t){const e=this.getRotorInputPosition(t,"L"),o=this.getRotor("L").plateToPin(e),r=this.getRotorOutputPosition(o,"L"),i=this.getRotorInputPosition(r,"C"),s=this.getRotor("C").plateToPin(i),n=this.getRotorOutputPosition(s,"C"),h=this.getRotorInputPosition(n,"R"),u=this.getRotor("R").plateToPin(h),R=this.getRotorOutputPosition(u,"R"),a=this.entryWheel.getLetterFromPlate(R);return this.plugBoard.getSwappedLetter(a)}getEncodedLetter(t){if(!this.isMachineValidState())throw"Machine is not in valid state";this.advanceRotors();const e=this.encodeForward(t),o=this.encodeReflect(e);return this.encodeBackwards(o)}getRotorInputPosition(t,e){return utils_1.getModularNumber(t+utils_1.getIndex(this.getRotorWindowLetter(e))-this.getRotor(e).ringPosition)}getRotorOutputPosition(t,e){return utils_1.getModularNumber(t-utils_1.getIndex(this.getRotorWindowLetter(e))+this.getRotor(e).ringPosition)}encode(t){let e="";for(let o=0;o<t.length;o+=1)e+=this.getEncodedLetter(t.charAt(o));return e}isMachineValidState(){return this.getRotor("L")instanceof Rotor_1.default&&this.getRotor("C")instanceof Rotor_1.default&&this.getRotor("R")instanceof Rotor_1.default&&this.reflector instanceof Reflector_1.default}}exports.default=Enigma,Enigma.LEFT_ROTOR="L",Enigma.CENTER_ROTOR="C",Enigma.RIGHT_ROTOR="R";
