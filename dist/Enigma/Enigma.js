Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var t=s(require("../Component/PlugBoard/PlugBoard")),e=require("../lib/utils"),o=s(require("../Component/WiredWheel/EntryWheel")),r=s(require("../Component/WiredWheel/Rotor/Rotor")),i=s(require("../Component/WiredWheel/Reflector/Reflector")),n=s(require("../lib/EventEmitter"));function s(t){return t&&t.__esModule?t:{default:t}}const h="L",u="C",a="R";class d extends n.default{plugBoard=new t.default;entryWheel=new o.default;rotors={};rotorsWindowLetter={};constructor(){super(),this.setRotor(null,h),this.setRotor(null,u),this.setRotor(null,a)}getPlugBoard(){return this.plugBoard}setRotor(t,e){return this.rotors[e]=t,this.emit("change.rotorSet",t,e),this.setRotorWindowLetter("A",e),this}getRotor(t){return this.rotors[t]}setReflector(t){return this.reflector=t,this.emit("change.reflectorSet",t),this}setRotorWindowLetter(t,e){return this.rotorsWindowLetter[e]=t,this.emit("change.rotorWindowLetterSet",t,e,this.getRotor(e)),this}getRotorWindowLetter(t){return this.rotorsWindowLetter[t]}isRotorInNotchPosition(t){const o=(0,e.getNotchLetter)(this.getRotorWindowLetter(t));return this.getRotor(t).notchPosition.indexOf(o)>-1}advanceRotor(t){return this.setRotorWindowLetter((0,e.getNextLetter)(this.getRotorWindowLetter(t)),t),this.emit("change.rotorAdvanced",t,this.getRotor(t),this.getRotorWindowLetter(t)),this}advanceRotors(){const t=this.isRotorInNotchPosition(u),e=this.isRotorInNotchPosition(a);return t&&this.advanceRotor(h),(t||e)&&this.advanceRotor(u),this.advanceRotor(a),this.emit("change.rotorsAdvanced"),this}encodeForward(t){const e=t.toUpperCase(),o=this.plugBoard.getSwappedLetter(e),r=this.entryWheel.getPlateFromLetter(o),i=this.getRotorInputPosition(r,a),n=this.getRotor(a).pinToPlate(i),s=this.getRotorOutputPosition(n,a),d=this.getRotorInputPosition(s,u),R=this.getRotor(u).pinToPlate(d),g=this.getRotorOutputPosition(R,u),l=this.getRotorInputPosition(g,h),c=this.getRotor(h).pinToPlate(l);return this.getRotorOutputPosition(c,h)}encodeReflect(t){return this.reflector.pinToPin(t)}encodeBackwards(t){const e=this.getRotorInputPosition(t,h),o=this.getRotor(h).plateToPin(e),r=this.getRotorOutputPosition(o,h),i=this.getRotorInputPosition(r,u),n=this.getRotor(u).plateToPin(i),s=this.getRotorOutputPosition(n,u),d=this.getRotorInputPosition(s,a),R=this.getRotor(a).plateToPin(d),g=this.getRotorOutputPosition(R,a),l=this.entryWheel.getLetterFromPlate(g);return this.plugBoard.getSwappedLetter(l)}getEncodedLetter(t){if(!this.isMachineValidState())throw"Machine is not in valid state";this.advanceRotors();const e=this.encodeForward(t),o=this.encodeReflect(e);return this.encodeBackwards(o)}getRotorInputPosition(t,o){return(0,e.getModularNumber)(t+(0,e.getIndex)(this.getRotorWindowLetter(o))-this.getRotor(o).ringPosition)}getRotorOutputPosition(t,o){return(0,e.getModularNumber)(t-(0,e.getIndex)(this.getRotorWindowLetter(o))+this.getRotor(o).ringPosition)}encode(t){let e="";for(let o=0;o<t.length;o+=1)e+=this.getEncodedLetter(t.charAt(o));return e}isMachineValidState(){return this.getRotor(h)instanceof r.default&&this.getRotor(u)instanceof r.default&&this.getRotor(a)instanceof r.default&&this.reflector instanceof i.default}static LEFT_ROTOR=h;static CENTER_ROTOR=u;static RIGHT_ROTOR=a}exports.default=d;
